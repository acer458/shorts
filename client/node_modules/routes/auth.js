// backend/routes/auth.js
const express = require("express");
const { sendVerificationEmail } = require("../utils/mailer");
const router = express.Router();

// In-memory storage for example only! Use a DB for production.
const userDB = {};        // { gmail: { username, password, code, verified } }

function generateCode() {
  return Math.floor(100000 + Math.random() * 900000).toString(); // 6-digit code
}

// 1. Send email with verification code
router.post("/send-verification-code", async (req, res) => {
  const { username, gmail, password } = req.body;
  if (!gmail || !/^[\w.+-]+@gmail\.com$/.test(gmail)) {
    return res.status(400).json({ message: "Invalid Gmail address." });
  }
  // Generate code & save user (overwrite if needed)
  const code = generateCode();
  userDB[gmail] = { username, password, code, verified: false };
  try {
    await sendVerificationEmail(gmail, code);
    res.json({ message: "Verification code sent!" });
  } catch (err) {
    res.status(500).json({ message: "Failed to send email." });
  }
});

// 2. Verify code submitted by user
router.post("/verify-code", (req, res) => {
  const { gmail, code } = req.body;
  const user = userDB[gmail];
  if (!user || user.code !== code) {
    return res.status(400).json({ verified: false, message: "Incorrect code." });
  }
  user.verified = true;
  res.json({ verified: true });
});

// 3. For frontend polling/check (optional)
router.get("/check-gmail-verified", (req, res) => {
  const { gmail } = req.query;
  const user = userDB[gmail];
  res.json({ verified: user && user.verified });
});

module.exports = router;
